/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Id = string;
export type Data = CleaningTemplateData | ParsingTemplateData;
export type Uppercase = boolean | null;
export type MaxLength = number | null;
export type AllowChars = string | null;
export type InputFormat = string | null;
export type OutputFormat = string | null;
export type DecimalPlaces = number | null;
export type UseStatementDateYear = boolean | null;
export type ProcessorType = "clean_text" | "clean_numbers" | "clean_currency" | "clean_date";
export type Forms1 = string[] | null;
export type Ignore = boolean | null;
export type Tables1 = string[] | null;
export type PageNumbers = string;
export type Pages = PageConfig[];
export type RuleType = "form" | "table";
export type Config = FormConfig | TableConfig;
export type Type = string | null;
export type Regex = string | null;
export type FormFieldName =
  | "customer_name"
  | "sort_code"
  | "account_number"
  | "start_balance"
  | "money_out"
  | "money_in"
  | "end_balance";
export type X = number;
export type Y = number;
export type FormSearchType = "regex" | "coordinates";
export type ColumnType = "text";
export type ColumnFieldName = "date" | "description" | "type" | "amount";
export type Columns = ColumnConfig[];
export type RowDelimiterType = "line" | "field";
export type MaxPixelValue = number | null;
export type RuleId = string;
export type Rules = Rule[];
export type Version = string;
export type TemplateName = string;
export type ExtractionMethod = "ocr" | "extraction";
export type Name = string;
export type Version1 = string;
export type CreatedAt = string;
export type UpdatedAt = string;
export type TemplateType = "CLEANING" | "PARSING";

export interface Templates {
  id: Id;
  data: Data;
  name: Name;
  version: Version1;
  created_at: CreatedAt;
  updated_at: UpdatedAt;
  template_type: TemplateType;
  [k: string]: unknown;
}
export interface CleaningTemplateData {
  forms: Forms;
  tables: Tables;
  [k: string]: unknown;
}
export interface Forms {
  [k: string]: ProcessorConfig;
}
export interface ProcessorConfig {
  options: ProcessorOptions;
  processor: ProcessorType;
  [k: string]: unknown;
}
export interface ProcessorOptions {
  uppercase?: Uppercase;
  max_length?: MaxLength;
  allow_chars?: AllowChars;
  input_format?: InputFormat;
  output_format?: OutputFormat;
  decimal_places?: DecimalPlaces;
  use_statement_date_year?: UseStatementDateYear;
  [k: string]: unknown;
}
export interface Tables {
  [k: string]: {
    [k: string]: ProcessorConfig;
  };
}
export interface ParsingTemplateData {
  pages: Pages;
  rules: Rules;
  metadata: Metadata;
  extraction_method: ExtractionMethod;
  [k: string]: unknown;
}
export interface PageConfig {
  forms?: Forms1;
  ignore?: Ignore;
  tables?: Tables1;
  page_numbers: PageNumbers;
  [k: string]: unknown;
}
export interface Rule {
  type: RuleType;
  config: Config;
  rule_id: RuleId;
  [k: string]: unknown;
}
export interface FormConfig {
  type?: Type;
  regex?: Regex;
  field_name: FormFieldName;
  coordinates?: BoundingBox | null;
  search_type: FormSearchType;
  [k: string]: unknown;
}
export interface BoundingBox {
  top_left: Coordinates;
  bottom_right: Coordinates;
  [k: string]: unknown;
}
export interface Coordinates {
  x: X;
  y: Y;
  [k: string]: unknown;
}
export interface TableConfig {
  columns: Columns;
  row_delimiter: RowDelimiter;
  [k: string]: unknown;
}
export interface ColumnConfig {
  type: ColumnType;
  field_name: ColumnFieldName;
  coordinates: BoundingBox;
  [k: string]: unknown;
}
export interface RowDelimiter {
  type: RowDelimiterType;
  field_name: ColumnFieldName;
  max_pixel_value?: MaxPixelValue;
  [k: string]: unknown;
}
export interface Metadata {
  version: Version;
  template_name: TemplateName;
  [k: string]: unknown;
}
